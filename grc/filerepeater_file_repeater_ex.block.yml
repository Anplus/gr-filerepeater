# auto-generated by grc.converter

id: filerepeater_file_repeater_ex
label: Advanced File Source
category: '[Advanced File]'

parameters:
-   id: file
    label: File
    dtype: file_open
-   id: type
    label: Output Type
    dtype: enum
    options: [complex, float, int, short, byte]
    option_attributes:
        hide_complex_conv: [none, all, all, all, all]
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short,
            gr.sizeof_char]
    hide: part
-   id: complexconv
    label: Complex Conversion
    dtype: enum
    options: ['0', '1', '2']
    option_labels: [None, From Signed8/HackRF, From Unsigned8/RTLSDR]
    hide: ${ type.hide_complex_conv }
-   id: repeat
    label: Repeat
    dtype: enum
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: delayFirstStart
    label: Delay first start (sec)
    dtype: float
    default: '0.0'
-   id: repeat_delay
    label: ms Delay between repeats
    dtype: int
    default: '0'
-   id: repeat_times
    label: Only repeat n times
    dtype: int
    default: '0'
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: verbose
    label: Verbose
    dtype: enum
    options: ['False', 'True']
    option_labels: ['No', 'Yes']

outputs:
-   domain: stream
    dtype: ${ type }
    vlen: ${ vlen }
asserts:
- ${ vlen > 0 }
- ${ delayFirstStart >= 0.0 }

templates:
    imports: import filerepeater
    make: filerepeater.file_repeater_ex(${type.size}*${vlen}, ${file}, ${complexconv},
        ${delayFirstStart},${repeat},${repeat_delay},${repeat_times},${verbose})
    callbacks:
    - open(${file}, ${repeat},${repeat_delay},${repeat_times})

documentation: "GNURadio block with more control over how files are played.  Files\
    \ can be started with an initial delay before starting to output data \n(output\
    \ 0's until the timer is hit), played with delays in between (output 0's in between),\
    \ or played once then output zero's rather \nthan just returning no samples. \
    \ The block can also transparently read/convert complex data from HackRF/Signed8\
    \ or RTLSDR/Unsigned8 files.\n\nDelay first start (sec): float delay in seconds\
    \ (can be fractional) before the file data stream is started.  Will output zeros\
    \ until this delay is hit.\n\nreplay delay in ms: The delay between replays should\
    \ be provided in milliseconds.  If this is set to 0, there will be no delay.\n\
    \tDuring the delay, zero's will be output (similar to a mute).  Once the delay\
    \ is over the file will restart from the beginning.\n\t\nreplay count: Only play\
    \ the file n many times.  If this is set to 0, it will play continuously.\n\n\
    Notes: \n\n- These can be combined, such as: Wait 2 seconds, then play the file\
    \ 3 times but wait 1000 ms in between each play.\n\n- Also note that if you want\
    \ a file to output 0's after the end is reached rather than just returning no\
    \ samples, set repeat to \"yes\" and replay count to 1."

file_format: 1
