# auto-generated by grc.converter

id: filerepeater_AdvFileSink
label: Advanced File Sink
category: '[Advanced File]'

parameters:
-   id: basedir
    label: Base Directory
    dtype: string
    default: /tmp
-   id: basefile
    label: Base Filename
    dtype: string
    default: gr_record
-   id: type
    label: Input Type
    dtype: enum
    options: [complex, float, floatwav, int, short, byte]
    option_labels: [Complex, Float, WAV File (Float), Int, Short, Byte]
    option_attributes:
        datatype: ['1', '2', '6', '3', '4', '5']
        hide_wav: [all, all, 'none', all, all, all]
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_float, gr.sizeof_int,
            gr.sizeof_short, gr.sizeof_char]
        typename: [complex, float, float, int, short, byte]
    hide: part
-   id: bits_per_sample
    label: Bits per Sample
    dtype: int
    default: '8'
    hide: ${ type.hide_wav }
-   id: radioCenterFreq
    label: Frequency
    dtype: float
    default: freq
-   id: sampleRate
    label: Sample Rate
    dtype: float
    default: samp_rate
-   id: maxSize
    label: Max File Size (B)
    dtype: int
    default: '0'
-   id: maxTimeSec
    label: Max Record Time (s)
    dtype: int
    default: '0'
-   id: recordOnStart
    label: Record On Start
    dtype: enum
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
-   id: honorFreqChange
    label: Honor Freq Change
    dtype: enum
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
-   id: autostartFreqChange
    label: Autostart on Freq Change
    dtype: enum
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
-   id: unbuffered
    label: Buffered Writes
    dtype: enum
    options: ['False', 'True']
    option_labels: ['Yes', 'No']
-   id: honorFreqTags
    label: Honor Freq Tags
    dtype: enum
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }

inputs:
-   domain: message
    id: data_in
    optional: true
-   domain: stream
    dtype: ${ type.typename }
    vlen: ${ vlen }
    optional: true
-   domain: message
    id: recordstate
    optional: true
asserts:
- ${ vlen > 0 }

templates:
    imports: import filerepeater
    make: filerepeater.AdvFileSink(${type.datatype}, ${type.size}*${vlen}, ${basedir},
        ${basefile}, ${radioCenterFreq}, ${sampleRate}, ${maxSize}, ${maxTimeSec},${recordOnStart},${honorFreqChange},${autostartFreqChange},
        ${bits_per_sample},${unbuffered},${honorFreqTags})
    callbacks:
    - setCenterFrequency(${radioCenterFreq})

documentation: |-
    This is an enhanced file sink block that can key off of a message to start/stop recording.  Files will be stored in the specified directory and start with the specified base filename.  Sample rate, frequency, and a timestamp will then be added to each filename.

    Note: Files can be limited in either byte size or recording time from the parameters above.  Setting either to 0 disables that limit check.

    Honor Freq Change indicates to the block how to handle a changing frequency.  If set to yes and recording is taking place, the file will be closed and a new one will be started with the new frequency in the designator.

    Autostart on freq change, indicates if file recording will automatically start (if not started), or stop/start a new file when a new frequency is set.  NOTE: for autostart to function, honor freq change also needs to be set.

    The data_in connector can be used to pass data packets in for recording as if they had come through the work stream.

file_format: 1
